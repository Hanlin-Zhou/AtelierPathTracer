#pragma once
#include <DirectX12/d3d12.h>
#include <wrl.h>
#include <cstdint>

namespace DX {
	enum class ResourceState : uint32_t {
		Common                          = D3D12_RESOURCE_STATE_COMMON,
		VertexConstantBuffer            = D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
		IndexBuffer                     = D3D12_RESOURCE_STATE_INDEX_BUFFER,
		RenderTarget					= D3D12_RESOURCE_STATE_RENDER_TARGET,
		UnorderedAcess					= D3D12_RESOURCE_STATE_UNORDERED_ACCESS,
		DepthWrite						= D3D12_RESOURCE_STATE_DEPTH_WRITE,
		DepthRead						= D3D12_RESOURCE_STATE_DEPTH_READ,
		NonPixel						= D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE,
		Pixel							= D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,
		Stream							= D3D12_RESOURCE_STATE_STREAM_OUT,
		Indirect						= D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT,
		CopyDest						= D3D12_RESOURCE_STATE_COPY_DEST,
		CopySrc							= D3D12_RESOURCE_STATE_COPY_SOURCE,
		ResolveDest						= D3D12_RESOURCE_STATE_RESOLVE_DEST,
		ResolveSrc						= D3D12_RESOURCE_STATE_RESOLVE_SOURCE,
		RTAS							= D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE,
		ShadingRate						= D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE,
		GenericRead						= D3D12_RESOURCE_STATE_GENERIC_READ,
		AllShaderResource				= D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE,
		Present							= D3D12_RESOURCE_STATE_PRESENT,
		Predication						= D3D12_RESOURCE_STATE_PREDICATION
		

	};
}